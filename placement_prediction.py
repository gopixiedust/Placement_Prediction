# -*- coding: utf-8 -*-
"""Placement_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2jbrE4MF9ww298G3hb--fFZxfhYQ9y9
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/grive')

df = pd.read_csv("/content/grive/MyDrive/DATA_SETS/Placement_Data_Full_Class.csv")

df.head()

df.describe()

df.info()

df['salary'].fillna(value=df["salary"].mean(), inplace=True)

cm = 0
for i in range(0,215):
  #print(df['gender'][i],end = " ")
  #print(df['status'][i])
  if df['gender'][i] == 'M' and df['status'][i]=='Placed':
    cm = cm+1
print(cm)

cf = 0
for i in range(0,214):
  #print(df['gender'][i],end = " ")
  #print(df['status'][i])
  if df['gender'][i] == 'F' and df['status'][i]=='Placed':
    cf = cf+1
print(cf)

tm = 0
tf = 0
for i in range(0,214):
  #print(df['gender'][i],end = " ")
  #print(df['status'][i])
  if df['gender'][i] == 'M':
    tm = tm+1
  else :
    tf = tf+1  
print(tm,end = " ")
print(tf)

df['ssc_b'].unique()

df['hsc_b'].unique()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['gender'] = le.fit_transform(df['gender'])
df['ssc_b'] = le.fit_transform(df['ssc_b'])
df['workex'] = le.fit_transform(df['workex'])
df['specialisation'] = le.fit_transform(df['specialisation'])
df['status'] = le.fit_transform(df['status'])
df['hsc_b'] = le.fit_transform(df['hsc_b'])
df['hsc_s'] = le.fit_transform(df['hsc_s'])
df['degree_t'] = le.fit_transform(df['degree_t'])

df.head()

df["salary"]=np.log(df["salary"])

df.head()

import matplotlib.pyplot as plt
df['salary'].hist()
plt.show()

import seaborn as sns
plt.figure(figsize=(15,10))
corr = df.corr()
sns.heatmap(corr,annot=True)

X=df.drop("status",axis=1)
y=df["status"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()
rfc.fit(X_train,y_train)

rfc.score(X_test,y_test)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

rfc2=RandomForestClassifier()
rfc2.fit(X_train,y_train)

rfc2.score(X_test,y_test)

